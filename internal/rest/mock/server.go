// Code generated by MockGen. DO NOT EDIT.
// Source: server.go
//
// Generated by this command:
//
//	mockgen -source server.go -destination mock/server.go
//

// Package mock_rest is a generated GoMock package.
package mock_rest

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	rest "github.com/girlguidingstaplehurst/district/internal/rest"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
	isgomock struct{}
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AddEvent mocks base method.
func (m *MockDatabase) AddEvent(ctx context.Context, event *rest.AddEventJSONRequestBody) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEvent indicates an expected call of AddEvent.
func (mr *MockDatabaseMockRecorder) AddEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockDatabase)(nil).AddEvent), ctx, event)
}

// AddEvents mocks base method.
func (m *MockDatabase) AddEvents(ctx context.Context, event rest.AdminAddEventsRequestObject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEvents", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEvents indicates an expected call of AddEvents.
func (mr *MockDatabaseMockRecorder) AddEvents(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvents", reflect.TypeOf((*MockDatabase)(nil).AddEvents), ctx, event)
}

// AddInvoice mocks base method.
func (m *MockDatabase) AddInvoice(ctx context.Context, invoice *rest.SendInvoiceBody) (*rest.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInvoice", ctx, invoice)
	ret0, _ := ret[0].(*rest.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInvoice indicates an expected call of AddInvoice.
func (mr *MockDatabaseMockRecorder) AddInvoice(ctx, invoice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInvoice", reflect.TypeOf((*MockDatabase)(nil).AddInvoice), ctx, invoice)
}

// AdminListEvents mocks base method.
func (m *MockDatabase) AdminListEvents(ctx context.Context, from, to time.Time) ([]rest.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminListEvents", ctx, from, to)
	ret0, _ := ret[0].([]rest.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminListEvents indicates an expected call of AdminListEvents.
func (mr *MockDatabaseMockRecorder) AdminListEvents(ctx, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminListEvents", reflect.TypeOf((*MockDatabase)(nil).AdminListEvents), ctx, from, to)
}

// GetEvent mocks base method.
func (m *MockDatabase) GetEvent(ctx context.Context, id string) (rest.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", ctx, id)
	ret0, _ := ret[0].(rest.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockDatabaseMockRecorder) GetEvent(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockDatabase)(nil).GetEvent), ctx, id)
}

// GetInvoiceByID mocks base method.
func (m *MockDatabase) GetInvoiceByID(ctx context.Context, id string) (rest.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceByID", ctx, id)
	ret0, _ := ret[0].(rest.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceByID indicates an expected call of GetInvoiceByID.
func (mr *MockDatabaseMockRecorder) GetInvoiceByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceByID", reflect.TypeOf((*MockDatabase)(nil).GetInvoiceByID), ctx, id)
}

// GetInvoiceEvents mocks base method.
func (m *MockDatabase) GetInvoiceEvents(ctx context.Context, ids ...string) ([]rest.DBInvoiceEvent, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInvoiceEvents", varargs...)
	ret0, _ := ret[0].([]rest.DBInvoiceEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceEvents indicates an expected call of GetInvoiceEvents.
func (mr *MockDatabaseMockRecorder) GetInvoiceEvents(ctx any, ids ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceEvents", reflect.TypeOf((*MockDatabase)(nil).GetInvoiceEvents), varargs...)
}

// GetRates mocks base method.
func (m *MockDatabase) GetRates(ctx context.Context) ([]rest.Rate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRates", ctx)
	ret0, _ := ret[0].([]rest.Rate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRates indicates an expected call of GetRates.
func (mr *MockDatabaseMockRecorder) GetRates(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRates", reflect.TypeOf((*MockDatabase)(nil).GetRates), ctx)
}

// ListEvents mocks base method.
func (m *MockDatabase) ListEvents(ctx context.Context, from, to time.Time) ([]rest.ListEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvents", ctx, from, to)
	ret0, _ := ret[0].([]rest.ListEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvents indicates an expected call of ListEvents.
func (mr *MockDatabaseMockRecorder) ListEvents(ctx, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockDatabase)(nil).ListEvents), ctx, from, to)
}

// ListEventsForContact mocks base method.
func (m *MockDatabase) ListEventsForContact(ctx context.Context, contactID string, from, to time.Time) ([]rest.ListEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventsForContact", ctx, contactID, from, to)
	ret0, _ := ret[0].([]rest.ListEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventsForContact indicates an expected call of ListEventsForContact.
func (mr *MockDatabaseMockRecorder) ListEventsForContact(ctx, contactID, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventsForContact", reflect.TypeOf((*MockDatabase)(nil).ListEventsForContact), ctx, contactID, from, to)
}

// MarkInvoicePaid mocks base method.
func (m *MockDatabase) MarkInvoicePaid(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkInvoicePaid", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkInvoicePaid indicates an expected call of MarkInvoicePaid.
func (mr *MockDatabaseMockRecorder) MarkInvoicePaid(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkInvoicePaid", reflect.TypeOf((*MockDatabase)(nil).MarkInvoicePaid), ctx, id)
}

// MarkInvoiceSent mocks base method.
func (m *MockDatabase) MarkInvoiceSent(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkInvoiceSent", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkInvoiceSent indicates an expected call of MarkInvoiceSent.
func (mr *MockDatabaseMockRecorder) MarkInvoiceSent(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkInvoiceSent", reflect.TypeOf((*MockDatabase)(nil).MarkInvoiceSent), ctx, id)
}

// SetEventStatus mocks base method.
func (m *MockDatabase) SetEventStatus(Ctx context.Context, eventID, state string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEventStatus", Ctx, eventID, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEventStatus indicates an expected call of SetEventStatus.
func (mr *MockDatabaseMockRecorder) SetEventStatus(Ctx, eventID, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventStatus", reflect.TypeOf((*MockDatabase)(nil).SetEventStatus), Ctx, eventID, state)
}

// SetRate mocks base method.
func (m *MockDatabase) SetRate(ctx context.Context, eventID, rate string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRate", ctx, eventID, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRate indicates an expected call of SetRate.
func (mr *MockDatabaseMockRecorder) SetRate(ctx, eventID, rate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRate", reflect.TypeOf((*MockDatabase)(nil).SetRate), ctx, eventID, rate)
}

// MockPDFGenerator is a mock of PDFGenerator interface.
type MockPDFGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockPDFGeneratorMockRecorder
	isgomock struct{}
}

// MockPDFGeneratorMockRecorder is the mock recorder for MockPDFGenerator.
type MockPDFGeneratorMockRecorder struct {
	mock *MockPDFGenerator
}

// NewMockPDFGenerator creates a new mock instance.
func NewMockPDFGenerator(ctrl *gomock.Controller) *MockPDFGenerator {
	mock := &MockPDFGenerator{ctrl: ctrl}
	mock.recorder = &MockPDFGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPDFGenerator) EXPECT() *MockPDFGeneratorMockRecorder {
	return m.recorder
}

// GenerateInvoice mocks base method.
func (m *MockPDFGenerator) GenerateInvoice(ctx context.Context, invoice *rest.Invoice) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateInvoice", ctx, invoice)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateInvoice indicates an expected call of GenerateInvoice.
func (mr *MockPDFGeneratorMockRecorder) GenerateInvoice(ctx, invoice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateInvoice", reflect.TypeOf((*MockPDFGenerator)(nil).GenerateInvoice), ctx, invoice)
}

// GeneratePageContent mocks base method.
func (m *MockPDFGenerator) GeneratePageContent(ctx context.Context, key string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePageContent", ctx, key)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePageContent indicates an expected call of GeneratePageContent.
func (mr *MockPDFGeneratorMockRecorder) GeneratePageContent(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePageContent", reflect.TypeOf((*MockPDFGenerator)(nil).GeneratePageContent), ctx, key)
}

// MockEmailSender is a mock of EmailSender interface.
type MockEmailSender struct {
	ctrl     *gomock.Controller
	recorder *MockEmailSenderMockRecorder
	isgomock struct{}
}

// MockEmailSenderMockRecorder is the mock recorder for MockEmailSender.
type MockEmailSenderMockRecorder struct {
	mock *MockEmailSender
}

// NewMockEmailSender creates a new mock instance.
func NewMockEmailSender(ctrl *gomock.Controller) *MockEmailSender {
	mock := &MockEmailSender{ctrl: ctrl}
	mock.recorder = &MockEmailSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailSender) EXPECT() *MockEmailSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockEmailSender) Send(ctx context.Context, to, subject, body string, attachments ...rest.EmailAttachment) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, to, subject, body}
	for _, a := range attachments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEmailSenderMockRecorder) Send(ctx, to, subject, body any, attachments ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, to, subject, body}, attachments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEmailSender)(nil).Send), varargs...)
}

// SendWithAttachments mocks base method.
func (m *MockEmailSender) SendWithAttachments(ctx context.Context, to, subject, body string, attachments ...rest.EmailAttachment) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, to, subject, body}
	for _, a := range attachments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendWithAttachments", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWithAttachments indicates an expected call of SendWithAttachments.
func (mr *MockEmailSenderMockRecorder) SendWithAttachments(ctx, to, subject, body any, attachments ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, to, subject, body}, attachments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWithAttachments", reflect.TypeOf((*MockEmailSender)(nil).SendWithAttachments), varargs...)
}

// MockCaptchaVerifier is a mock of CaptchaVerifier interface.
type MockCaptchaVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockCaptchaVerifierMockRecorder
	isgomock struct{}
}

// MockCaptchaVerifierMockRecorder is the mock recorder for MockCaptchaVerifier.
type MockCaptchaVerifierMockRecorder struct {
	mock *MockCaptchaVerifier
}

// NewMockCaptchaVerifier creates a new mock instance.
func NewMockCaptchaVerifier(ctrl *gomock.Controller) *MockCaptchaVerifier {
	mock := &MockCaptchaVerifier{ctrl: ctrl}
	mock.recorder = &MockCaptchaVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaptchaVerifier) EXPECT() *MockCaptchaVerifierMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockCaptchaVerifier) Verify(ctx context.Context, token, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, token, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockCaptchaVerifierMockRecorder) Verify(ctx, token, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockCaptchaVerifier)(nil).Verify), ctx, token, ip)
}

// MockContentManager is a mock of ContentManager interface.
type MockContentManager struct {
	ctrl     *gomock.Controller
	recorder *MockContentManagerMockRecorder
	isgomock struct{}
}

// MockContentManagerMockRecorder is the mock recorder for MockContentManager.
type MockContentManagerMockRecorder struct {
	mock *MockContentManager
}

// NewMockContentManager creates a new mock instance.
func NewMockContentManager(ctrl *gomock.Controller) *MockContentManager {
	mock := &MockContentManager{ctrl: ctrl}
	mock.recorder = &MockContentManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentManager) EXPECT() *MockContentManagerMockRecorder {
	return m.recorder
}

// Email mocks base method.
func (m *MockContentManager) Email(ctx context.Context, key string) (rest.EmailContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Email", ctx, key)
	ret0, _ := ret[0].(rest.EmailContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Email indicates an expected call of Email.
func (mr *MockContentManagerMockRecorder) Email(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Email", reflect.TypeOf((*MockContentManager)(nil).Email), ctx, key)
}

// EmailTemplate mocks base method.
func (m *MockContentManager) EmailTemplate(ctx context.Context, key string, vars map[string]any) (rest.EmailContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailTemplate", ctx, key, vars)
	ret0, _ := ret[0].(rest.EmailContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmailTemplate indicates an expected call of EmailTemplate.
func (mr *MockContentManagerMockRecorder) EmailTemplate(ctx, key, vars any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailTemplate", reflect.TypeOf((*MockContentManager)(nil).EmailTemplate), ctx, key, vars)
}
