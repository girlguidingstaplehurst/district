// Package test provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.0 DO NOT EDIT.
package test

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Admin_authScopes = "admin_auth.Scopes"
)

// Defines values for DiscountTableRowType.
const (
	Flat DiscountTableRowType = "flat"
)

// Defines values for EventStatus.
const (
	EventStatusApproved          EventStatus = "approved"
	EventStatusAwaitingDocuments EventStatus = "awaiting documents"
	EventStatusCancelled         EventStatus = "cancelled"
	EventStatusProvisional       EventStatus = "provisional"
)

// Defines values for InvoiceStatus.
const (
	InvoiceStatusCancelled InvoiceStatus = "cancelled"
	InvoiceStatusPaid      InvoiceStatus = "paid"
	InvoiceStatusRaised    InvoiceStatus = "raised"
)

// AdminEventList defines model for AdminEventList.
type AdminEventList struct {
	Events []Event `json:"events"`
}

// AdminNewEvents defines model for AdminNewEvents.
type AdminNewEvents struct {
	Contact struct {
		EmailAddress openapi_types.Email `json:"email_address"`
		Name         string              `json:"name"`
	} `json:"contact"`
	Event struct {
		Details         string          `json:"details"`
		Instances       []EventInstance `json:"instances"`
		Name            string          `json:"name"`
		PubliclyVisible bool            `json:"publicly_visible"`
		Rate            string          `json:"rate"`
		Status          string          `json:"status"`
	} `json:"event"`
}

// Contact defines model for Contact.
type Contact struct {
	EmailAddress openapi_types.Email `json:"email_address"`
	Name         string              `json:"name"`
}

// DiscountTable defines model for DiscountTable.
type DiscountTable map[string]DiscountTableRow

// DiscountTableRow defines model for DiscountTableRow.
type DiscountTableRow struct {
	Type  DiscountTableRowType `json:"type"`
	Value float32              `json:"value"`
}

// DiscountTableRowType defines model for DiscountTableRow.Type.
type DiscountTableRowType string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	ErrorMessage string `json:"error_message"`
}

// Event defines model for Event.
type Event struct {
	Assignee     *openapi_types.Email `json:"assignee,omitempty"`
	Contact      string               `json:"contact"`
	Details      string               `json:"details"`
	Email        openapi_types.Email  `json:"email"`
	From         string               `json:"from"`
	Id           string               `json:"id"`
	Invoices     *[]InvoiceRef        `json:"invoices,omitempty"`
	KeyholderIn  *openapi_types.Email `json:"keyholderIn,omitempty"`
	KeyholderOut *openapi_types.Email `json:"keyholderOut,omitempty"`
	Name         string               `json:"name"`
	RateID       string               `json:"rateID"`
	Status       EventStatus          `json:"status"`
	To           string               `json:"to"`
	Visible      bool                 `json:"visible"`
}

// EventDetails defines model for EventDetails.
type EventDetails struct {
	Details         string `json:"details"`
	From            string `json:"from"`
	Name            string `json:"name"`
	PubliclyVisible bool   `json:"publicly_visible"`
	To              string `json:"to"`
}

// EventInstance defines model for EventInstance.
type EventInstance struct {
	From string `json:"from"`
	To   string `json:"to"`
}

// EventList defines model for EventList.
type EventList struct {
	Events []ListEvent `json:"events"`
}

// EventStatus defines model for EventStatus.
type EventStatus string

// Invoice defines model for Invoice.
type Invoice struct {
	Contact   openapi_types.Email `json:"contact"`
	Id        string              `json:"id"`
	Items     []InvoiceItem       `json:"items"`
	Paid      *string             `json:"paid,omitempty"`
	Reference string              `json:"reference"`
	Sent      *string             `json:"sent,omitempty"`
	Status    InvoiceStatus       `json:"status"`
}

// InvoiceEvent defines model for InvoiceEvent.
type InvoiceEvent struct {
	DiscountTable DiscountTable `json:"discountTable"`
	From          string        `json:"from"`
	Id            string        `json:"id"`
	Name          string        `json:"name"`
	Rate          float32       `json:"rate"`
	Status        EventStatus   `json:"status"`
	To            string        `json:"to"`
}

// InvoiceEvents defines model for InvoiceEvents.
type InvoiceEvents map[string][]InvoiceEvent

// InvoiceItem defines model for InvoiceItem.
type InvoiceItem struct {
	Cost        float32 `json:"cost"`
	Description string  `json:"description"`
	EventID     *string `json:"eventID,omitempty"`
	Id          *string `json:"id,omitempty"`
}

// InvoiceRef defines model for InvoiceRef.
type InvoiceRef struct {
	Id        string        `json:"id"`
	Paid      *string       `json:"paid,omitempty"`
	Reference string        `json:"reference"`
	Sent      *string       `json:"sent,omitempty"`
	Status    InvoiceStatus `json:"status"`
}

// InvoiceStatus defines model for InvoiceStatus.
type InvoiceStatus string

// ListEvent defines model for ListEvent.
type ListEvent struct {
	From   string      `json:"from"`
	Id     string      `json:"id"`
	Name   string      `json:"name"`
	Status EventStatus `json:"status"`
	To     string      `json:"to"`
}

// NewEvent defines model for NewEvent.
type NewEvent struct {
	Adhesives         bool         `json:"adhesives"`
	CaptchaToken      string       `json:"captchaToken"`
	CarParking        bool         `json:"carParking"`
	CleaningAndDamage bool         `json:"cleaningAndDamage"`
	Contact           Contact      `json:"contact"`
	Event             EventDetails `json:"event"`
	PrivacyPolicy     bool         `json:"privacyPolicy"`
	TermsOfHire       bool         `json:"termsOfHire"`
}

// Rate defines model for Rate.
type Rate struct {
	Description   string                  `json:"description"`
	DiscountTable *map[string]interface{} `json:"discountTable,omitempty"`
	HourlyRate    float32                 `json:"hourlyRate"`
	Id            string                  `json:"id"`
}

// RatesList defines model for RatesList.
type RatesList = []Rate

// RequestDocumentsBody defines model for RequestDocumentsBody.
type RequestDocumentsBody struct {
	CoshhSheets     bool `json:"coshhSheets"`
	DbsCertificate  bool `json:"dbsCertificate"`
	FoodSafety      bool `json:"foodSafety"`
	PublicLiability bool `json:"publicLiability"`
	RiskAssessment  bool `json:"riskAssessment"`
}

// SendInvoiceBody defines model for SendInvoiceBody.
type SendInvoiceBody struct {
	Contact openapi_types.Email `json:"contact"`

	// Events List of Event IDs that this invoice applies to.
	Events *[]string             `json:"events,omitempty"`
	Items  []SendInvoiceBodyItem `json:"items"`
}

// SendInvoiceBodyItem defines model for SendInvoiceBodyItem.
type SendInvoiceBodyItem struct {
	Cost        float32 `json:"cost"`
	Description string  `json:"description"`
	EventID     *string `json:"eventID,omitempty"`
}

// SetRateBody defines model for SetRateBody.
type SetRateBody struct {
	Rate string `json:"rate"`
}

// GetApiV1AdminEventsParams defines parameters for GetApiV1AdminEvents.
type GetApiV1AdminEventsParams struct {
	// From The date to obtain events from
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`

	// To The date to obtain events to
	To *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`

	// Contact Optional filter to events for a specific contact. Value is the contact's email.
	Contact *string `form:"contact,omitempty" json:"contact,omitempty"`
}

// AdminGetInvoicesForEventsParams defines parameters for AdminGetInvoicesForEvents.
type AdminGetInvoicesForEventsParams struct {
	// Events A comma-separated list of events to generate invoices for
	Events []string `form:"events" json:"events"`
}

// GetApiV1EventsParams defines parameters for GetApiV1Events.
type GetApiV1EventsParams struct {
	// From The date to obtain events from
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`

	// To The date to obtain events to
	To *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// AddEventJSONRequestBody defines body for AddEvent for application/json ContentType.
type AddEventJSONRequestBody = NewEvent

// AdminAddEventsJSONRequestBody defines body for AdminAddEvents for application/json ContentType.
type AdminAddEventsJSONRequestBody = AdminNewEvents

// AdminEventRequestDocumentsJSONRequestBody defines body for AdminEventRequestDocuments for application/json ContentType.
type AdminEventRequestDocumentsJSONRequestBody = RequestDocumentsBody

// AdminEventSetRateJSONRequestBody defines body for AdminEventSetRate for application/json ContentType.
type AdminEventSetRateJSONRequestBody = SetRateBody

// AdminSendInvoiceJSONRequestBody defines body for AdminSendInvoice for application/json ContentType.
type AdminSendInvoiceJSONRequestBody = SendInvoiceBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AddEventWithBody request with any body
	AddEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddEvent(ctx context.Context, body AddEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminAddEventsWithBody request with any body
	AdminAddEventsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminAddEvents(ctx context.Context, body AdminAddEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AdminEvents request
	GetApiV1AdminEvents(ctx context.Context, params *GetApiV1AdminEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AdminEventsEventID request
	GetApiV1AdminEventsEventID(ctx context.Context, eventID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminEventApprove request
	AdminEventApprove(ctx context.Context, eventID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminEventCancel request
	AdminEventCancel(ctx context.Context, eventID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminEventRequestDocumentsWithBody request with any body
	AdminEventRequestDocumentsWithBody(ctx context.Context, eventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminEventRequestDocuments(ctx context.Context, eventID string, body AdminEventRequestDocumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminEventSetRateWithBody request with any body
	AdminEventSetRateWithBody(ctx context.Context, eventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminEventSetRate(ctx context.Context, eventID string, body AdminEventSetRateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminGetInvoiceByID request
	AdminGetInvoiceByID(ctx context.Context, invoiceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminMarkInvoicePaid request
	AdminMarkInvoicePaid(ctx context.Context, invoiceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminGetInvoicesForEvents request
	AdminGetInvoicesForEvents(ctx context.Context, params *AdminGetInvoicesForEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminGetRates request
	AdminGetRates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminSendInvoiceWithBody request with any body
	AdminSendInvoiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminSendInvoice(ctx context.Context, body AdminSendInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Events request
	GetApiV1Events(ctx context.Context, params *GetApiV1EventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEventsICS request
	GetEventsICS(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AddEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddEventRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddEvent(ctx context.Context, body AddEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddEventRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminAddEventsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminAddEventsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminAddEvents(ctx context.Context, body AdminAddEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminAddEventsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AdminEvents(ctx context.Context, params *GetApiV1AdminEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AdminEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AdminEventsEventID(ctx context.Context, eventID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AdminEventsEventIDRequest(c.Server, eventID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminEventApprove(ctx context.Context, eventID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminEventApproveRequest(c.Server, eventID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminEventCancel(ctx context.Context, eventID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminEventCancelRequest(c.Server, eventID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminEventRequestDocumentsWithBody(ctx context.Context, eventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminEventRequestDocumentsRequestWithBody(c.Server, eventID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminEventRequestDocuments(ctx context.Context, eventID string, body AdminEventRequestDocumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminEventRequestDocumentsRequest(c.Server, eventID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminEventSetRateWithBody(ctx context.Context, eventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminEventSetRateRequestWithBody(c.Server, eventID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminEventSetRate(ctx context.Context, eventID string, body AdminEventSetRateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminEventSetRateRequest(c.Server, eventID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminGetInvoiceByID(ctx context.Context, invoiceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminGetInvoiceByIDRequest(c.Server, invoiceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminMarkInvoicePaid(ctx context.Context, invoiceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminMarkInvoicePaidRequest(c.Server, invoiceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminGetInvoicesForEvents(ctx context.Context, params *AdminGetInvoicesForEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminGetInvoicesForEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminGetRates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminGetRatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminSendInvoiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminSendInvoiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminSendInvoice(ctx context.Context, body AdminSendInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminSendInvoiceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Events(ctx context.Context, params *GetApiV1EventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1EventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEventsICS(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventsICSRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAddEventRequest calls the generic AddEvent builder with application/json body
func NewAddEventRequest(server string, body AddEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddEventRequestWithBody(server, "application/json", bodyReader)
}

// NewAddEventRequestWithBody generates requests for AddEvent with any type of body
func NewAddEventRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/add-event")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminAddEventsRequest calls the generic AdminAddEvents builder with application/json body
func NewAdminAddEventsRequest(server string, body AdminAddEventsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminAddEventsRequestWithBody(server, "application/json", bodyReader)
}

// NewAdminAddEventsRequestWithBody generates requests for AdminAddEvents with any type of body
func NewAdminAddEventsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/add-events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1AdminEventsRequest generates requests for GetApiV1AdminEvents
func NewGetApiV1AdminEventsRequest(server string, params *GetApiV1AdminEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Contact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact", runtime.ParamLocationQuery, *params.Contact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AdminEventsEventIDRequest generates requests for GetApiV1AdminEventsEventID
func NewGetApiV1AdminEventsEventIDRequest(server string, eventID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eventID", runtime.ParamLocationPath, eventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminEventApproveRequest generates requests for AdminEventApprove
func NewAdminEventApproveRequest(server string, eventID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eventID", runtime.ParamLocationPath, eventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/events/%s/approve-event", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminEventCancelRequest generates requests for AdminEventCancel
func NewAdminEventCancelRequest(server string, eventID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eventID", runtime.ParamLocationPath, eventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/events/%s/cancel-event", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminEventRequestDocumentsRequest calls the generic AdminEventRequestDocuments builder with application/json body
func NewAdminEventRequestDocumentsRequest(server string, eventID string, body AdminEventRequestDocumentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminEventRequestDocumentsRequestWithBody(server, eventID, "application/json", bodyReader)
}

// NewAdminEventRequestDocumentsRequestWithBody generates requests for AdminEventRequestDocuments with any type of body
func NewAdminEventRequestDocumentsRequestWithBody(server string, eventID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eventID", runtime.ParamLocationPath, eventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/events/%s/request-documents", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminEventSetRateRequest calls the generic AdminEventSetRate builder with application/json body
func NewAdminEventSetRateRequest(server string, eventID string, body AdminEventSetRateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminEventSetRateRequestWithBody(server, eventID, "application/json", bodyReader)
}

// NewAdminEventSetRateRequestWithBody generates requests for AdminEventSetRate with any type of body
func NewAdminEventSetRateRequestWithBody(server string, eventID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eventID", runtime.ParamLocationPath, eventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/events/%s/set-rate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminGetInvoiceByIDRequest generates requests for AdminGetInvoiceByID
func NewAdminGetInvoiceByIDRequest(server string, invoiceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoiceID", runtime.ParamLocationPath, invoiceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/invoices/by-id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminMarkInvoicePaidRequest generates requests for AdminMarkInvoicePaid
func NewAdminMarkInvoicePaidRequest(server string, invoiceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoiceID", runtime.ParamLocationPath, invoiceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/invoices/by-id/%s/mark-as-paid", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminGetInvoicesForEventsRequest generates requests for AdminGetInvoicesForEvents
func NewAdminGetInvoicesForEventsRequest(server string, params *AdminGetInvoicesForEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/invoices/for-events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "events", runtime.ParamLocationQuery, params.Events); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminGetRatesRequest generates requests for AdminGetRates
func NewAdminGetRatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/rates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminSendInvoiceRequest calls the generic AdminSendInvoice builder with application/json body
func NewAdminSendInvoiceRequest(server string, body AdminSendInvoiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminSendInvoiceRequestWithBody(server, "application/json", bodyReader)
}

// NewAdminSendInvoiceRequestWithBody generates requests for AdminSendInvoice with any type of body
func NewAdminSendInvoiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/send-invoice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1EventsRequest generates requests for GetApiV1Events
func NewGetApiV1EventsRequest(server string, params *GetApiV1EventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEventsICSRequest generates requests for GetEventsICS
func NewGetEventsICSRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/events.ics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AddEventWithBodyWithResponse request with any body
	AddEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddEventResponse, error)

	AddEventWithResponse(ctx context.Context, body AddEventJSONRequestBody, reqEditors ...RequestEditorFn) (*AddEventResponse, error)

	// AdminAddEventsWithBodyWithResponse request with any body
	AdminAddEventsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminAddEventsResponse, error)

	AdminAddEventsWithResponse(ctx context.Context, body AdminAddEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminAddEventsResponse, error)

	// GetApiV1AdminEventsWithResponse request
	GetApiV1AdminEventsWithResponse(ctx context.Context, params *GetApiV1AdminEventsParams, reqEditors ...RequestEditorFn) (*GetApiV1AdminEventsResponse, error)

	// GetApiV1AdminEventsEventIDWithResponse request
	GetApiV1AdminEventsEventIDWithResponse(ctx context.Context, eventID string, reqEditors ...RequestEditorFn) (*GetApiV1AdminEventsEventIDResponse, error)

	// AdminEventApproveWithResponse request
	AdminEventApproveWithResponse(ctx context.Context, eventID string, reqEditors ...RequestEditorFn) (*AdminEventApproveResponse, error)

	// AdminEventCancelWithResponse request
	AdminEventCancelWithResponse(ctx context.Context, eventID string, reqEditors ...RequestEditorFn) (*AdminEventCancelResponse, error)

	// AdminEventRequestDocumentsWithBodyWithResponse request with any body
	AdminEventRequestDocumentsWithBodyWithResponse(ctx context.Context, eventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminEventRequestDocumentsResponse, error)

	AdminEventRequestDocumentsWithResponse(ctx context.Context, eventID string, body AdminEventRequestDocumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminEventRequestDocumentsResponse, error)

	// AdminEventSetRateWithBodyWithResponse request with any body
	AdminEventSetRateWithBodyWithResponse(ctx context.Context, eventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminEventSetRateResponse, error)

	AdminEventSetRateWithResponse(ctx context.Context, eventID string, body AdminEventSetRateJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminEventSetRateResponse, error)

	// AdminGetInvoiceByIDWithResponse request
	AdminGetInvoiceByIDWithResponse(ctx context.Context, invoiceID string, reqEditors ...RequestEditorFn) (*AdminGetInvoiceByIDResponse, error)

	// AdminMarkInvoicePaidWithResponse request
	AdminMarkInvoicePaidWithResponse(ctx context.Context, invoiceID string, reqEditors ...RequestEditorFn) (*AdminMarkInvoicePaidResponse, error)

	// AdminGetInvoicesForEventsWithResponse request
	AdminGetInvoicesForEventsWithResponse(ctx context.Context, params *AdminGetInvoicesForEventsParams, reqEditors ...RequestEditorFn) (*AdminGetInvoicesForEventsResponse, error)

	// AdminGetRatesWithResponse request
	AdminGetRatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminGetRatesResponse, error)

	// AdminSendInvoiceWithBodyWithResponse request with any body
	AdminSendInvoiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminSendInvoiceResponse, error)

	AdminSendInvoiceWithResponse(ctx context.Context, body AdminSendInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminSendInvoiceResponse, error)

	// GetApiV1EventsWithResponse request
	GetApiV1EventsWithResponse(ctx context.Context, params *GetApiV1EventsParams, reqEditors ...RequestEditorFn) (*GetApiV1EventsResponse, error)

	// GetEventsICSWithResponse request
	GetEventsICSWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEventsICSResponse, error)
}

type AddEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON409      *ErrorResponse
	JSON422      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminAddEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON409      *ErrorResponse
	JSON422      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AdminAddEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminAddEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AdminEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminEventList
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1AdminEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AdminEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AdminEventsEventIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Event
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1AdminEventsEventIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AdminEventsEventIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminEventApproveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AdminEventApproveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminEventApproveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminEventCancelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AdminEventCancelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminEventCancelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminEventRequestDocumentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AdminEventRequestDocumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminEventRequestDocumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminEventSetRateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AdminEventSetRateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminEventSetRateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminGetInvoiceByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invoice
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AdminGetInvoiceByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminGetInvoiceByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminMarkInvoicePaidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AdminMarkInvoicePaidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminMarkInvoicePaidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminGetInvoicesForEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvoiceEvents
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AdminGetInvoicesForEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminGetInvoicesForEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminGetRatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RatesList
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AdminGetRatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminGetRatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminSendInvoiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AdminSendInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminSendInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1EventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventList
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1EventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1EventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventsICSResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetEventsICSResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventsICSResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AddEventWithBodyWithResponse request with arbitrary body returning *AddEventResponse
func (c *ClientWithResponses) AddEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddEventResponse, error) {
	rsp, err := c.AddEventWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddEventResponse(rsp)
}

func (c *ClientWithResponses) AddEventWithResponse(ctx context.Context, body AddEventJSONRequestBody, reqEditors ...RequestEditorFn) (*AddEventResponse, error) {
	rsp, err := c.AddEvent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddEventResponse(rsp)
}

// AdminAddEventsWithBodyWithResponse request with arbitrary body returning *AdminAddEventsResponse
func (c *ClientWithResponses) AdminAddEventsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminAddEventsResponse, error) {
	rsp, err := c.AdminAddEventsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminAddEventsResponse(rsp)
}

func (c *ClientWithResponses) AdminAddEventsWithResponse(ctx context.Context, body AdminAddEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminAddEventsResponse, error) {
	rsp, err := c.AdminAddEvents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminAddEventsResponse(rsp)
}

// GetApiV1AdminEventsWithResponse request returning *GetApiV1AdminEventsResponse
func (c *ClientWithResponses) GetApiV1AdminEventsWithResponse(ctx context.Context, params *GetApiV1AdminEventsParams, reqEditors ...RequestEditorFn) (*GetApiV1AdminEventsResponse, error) {
	rsp, err := c.GetApiV1AdminEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AdminEventsResponse(rsp)
}

// GetApiV1AdminEventsEventIDWithResponse request returning *GetApiV1AdminEventsEventIDResponse
func (c *ClientWithResponses) GetApiV1AdminEventsEventIDWithResponse(ctx context.Context, eventID string, reqEditors ...RequestEditorFn) (*GetApiV1AdminEventsEventIDResponse, error) {
	rsp, err := c.GetApiV1AdminEventsEventID(ctx, eventID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AdminEventsEventIDResponse(rsp)
}

// AdminEventApproveWithResponse request returning *AdminEventApproveResponse
func (c *ClientWithResponses) AdminEventApproveWithResponse(ctx context.Context, eventID string, reqEditors ...RequestEditorFn) (*AdminEventApproveResponse, error) {
	rsp, err := c.AdminEventApprove(ctx, eventID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminEventApproveResponse(rsp)
}

// AdminEventCancelWithResponse request returning *AdminEventCancelResponse
func (c *ClientWithResponses) AdminEventCancelWithResponse(ctx context.Context, eventID string, reqEditors ...RequestEditorFn) (*AdminEventCancelResponse, error) {
	rsp, err := c.AdminEventCancel(ctx, eventID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminEventCancelResponse(rsp)
}

// AdminEventRequestDocumentsWithBodyWithResponse request with arbitrary body returning *AdminEventRequestDocumentsResponse
func (c *ClientWithResponses) AdminEventRequestDocumentsWithBodyWithResponse(ctx context.Context, eventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminEventRequestDocumentsResponse, error) {
	rsp, err := c.AdminEventRequestDocumentsWithBody(ctx, eventID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminEventRequestDocumentsResponse(rsp)
}

func (c *ClientWithResponses) AdminEventRequestDocumentsWithResponse(ctx context.Context, eventID string, body AdminEventRequestDocumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminEventRequestDocumentsResponse, error) {
	rsp, err := c.AdminEventRequestDocuments(ctx, eventID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminEventRequestDocumentsResponse(rsp)
}

// AdminEventSetRateWithBodyWithResponse request with arbitrary body returning *AdminEventSetRateResponse
func (c *ClientWithResponses) AdminEventSetRateWithBodyWithResponse(ctx context.Context, eventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminEventSetRateResponse, error) {
	rsp, err := c.AdminEventSetRateWithBody(ctx, eventID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminEventSetRateResponse(rsp)
}

func (c *ClientWithResponses) AdminEventSetRateWithResponse(ctx context.Context, eventID string, body AdminEventSetRateJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminEventSetRateResponse, error) {
	rsp, err := c.AdminEventSetRate(ctx, eventID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminEventSetRateResponse(rsp)
}

// AdminGetInvoiceByIDWithResponse request returning *AdminGetInvoiceByIDResponse
func (c *ClientWithResponses) AdminGetInvoiceByIDWithResponse(ctx context.Context, invoiceID string, reqEditors ...RequestEditorFn) (*AdminGetInvoiceByIDResponse, error) {
	rsp, err := c.AdminGetInvoiceByID(ctx, invoiceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminGetInvoiceByIDResponse(rsp)
}

// AdminMarkInvoicePaidWithResponse request returning *AdminMarkInvoicePaidResponse
func (c *ClientWithResponses) AdminMarkInvoicePaidWithResponse(ctx context.Context, invoiceID string, reqEditors ...RequestEditorFn) (*AdminMarkInvoicePaidResponse, error) {
	rsp, err := c.AdminMarkInvoicePaid(ctx, invoiceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminMarkInvoicePaidResponse(rsp)
}

// AdminGetInvoicesForEventsWithResponse request returning *AdminGetInvoicesForEventsResponse
func (c *ClientWithResponses) AdminGetInvoicesForEventsWithResponse(ctx context.Context, params *AdminGetInvoicesForEventsParams, reqEditors ...RequestEditorFn) (*AdminGetInvoicesForEventsResponse, error) {
	rsp, err := c.AdminGetInvoicesForEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminGetInvoicesForEventsResponse(rsp)
}

// AdminGetRatesWithResponse request returning *AdminGetRatesResponse
func (c *ClientWithResponses) AdminGetRatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminGetRatesResponse, error) {
	rsp, err := c.AdminGetRates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminGetRatesResponse(rsp)
}

// AdminSendInvoiceWithBodyWithResponse request with arbitrary body returning *AdminSendInvoiceResponse
func (c *ClientWithResponses) AdminSendInvoiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminSendInvoiceResponse, error) {
	rsp, err := c.AdminSendInvoiceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminSendInvoiceResponse(rsp)
}

func (c *ClientWithResponses) AdminSendInvoiceWithResponse(ctx context.Context, body AdminSendInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminSendInvoiceResponse, error) {
	rsp, err := c.AdminSendInvoice(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminSendInvoiceResponse(rsp)
}

// GetApiV1EventsWithResponse request returning *GetApiV1EventsResponse
func (c *ClientWithResponses) GetApiV1EventsWithResponse(ctx context.Context, params *GetApiV1EventsParams, reqEditors ...RequestEditorFn) (*GetApiV1EventsResponse, error) {
	rsp, err := c.GetApiV1Events(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1EventsResponse(rsp)
}

// GetEventsICSWithResponse request returning *GetEventsICSResponse
func (c *ClientWithResponses) GetEventsICSWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEventsICSResponse, error) {
	rsp, err := c.GetEventsICS(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventsICSResponse(rsp)
}

// ParseAddEventResponse parses an HTTP response from a AddEventWithResponse call
func ParseAddEventResponse(rsp *http.Response) (*AddEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminAddEventsResponse parses an HTTP response from a AdminAddEventsWithResponse call
func ParseAdminAddEventsResponse(rsp *http.Response) (*AdminAddEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminAddEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1AdminEventsResponse parses an HTTP response from a GetApiV1AdminEventsWithResponse call
func ParseGetApiV1AdminEventsResponse(rsp *http.Response) (*GetApiV1AdminEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AdminEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminEventList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1AdminEventsEventIDResponse parses an HTTP response from a GetApiV1AdminEventsEventIDWithResponse call
func ParseGetApiV1AdminEventsEventIDResponse(rsp *http.Response) (*GetApiV1AdminEventsEventIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AdminEventsEventIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminEventApproveResponse parses an HTTP response from a AdminEventApproveWithResponse call
func ParseAdminEventApproveResponse(rsp *http.Response) (*AdminEventApproveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminEventApproveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminEventCancelResponse parses an HTTP response from a AdminEventCancelWithResponse call
func ParseAdminEventCancelResponse(rsp *http.Response) (*AdminEventCancelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminEventCancelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminEventRequestDocumentsResponse parses an HTTP response from a AdminEventRequestDocumentsWithResponse call
func ParseAdminEventRequestDocumentsResponse(rsp *http.Response) (*AdminEventRequestDocumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminEventRequestDocumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminEventSetRateResponse parses an HTTP response from a AdminEventSetRateWithResponse call
func ParseAdminEventSetRateResponse(rsp *http.Response) (*AdminEventSetRateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminEventSetRateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminGetInvoiceByIDResponse parses an HTTP response from a AdminGetInvoiceByIDWithResponse call
func ParseAdminGetInvoiceByIDResponse(rsp *http.Response) (*AdminGetInvoiceByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminGetInvoiceByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminMarkInvoicePaidResponse parses an HTTP response from a AdminMarkInvoicePaidWithResponse call
func ParseAdminMarkInvoicePaidResponse(rsp *http.Response) (*AdminMarkInvoicePaidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminMarkInvoicePaidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminGetInvoicesForEventsResponse parses an HTTP response from a AdminGetInvoicesForEventsWithResponse call
func ParseAdminGetInvoicesForEventsResponse(rsp *http.Response) (*AdminGetInvoicesForEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminGetInvoicesForEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvoiceEvents
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminGetRatesResponse parses an HTTP response from a AdminGetRatesWithResponse call
func ParseAdminGetRatesResponse(rsp *http.Response) (*AdminGetRatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminGetRatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RatesList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminSendInvoiceResponse parses an HTTP response from a AdminSendInvoiceWithResponse call
func ParseAdminSendInvoiceResponse(rsp *http.Response) (*AdminSendInvoiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminSendInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1EventsResponse parses an HTTP response from a GetApiV1EventsWithResponse call
func ParseGetApiV1EventsResponse(rsp *http.Response) (*GetApiV1EventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1EventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetEventsICSResponse parses an HTTP response from a GetEventsICSWithResponse call
func ParseGetEventsICSResponse(rsp *http.Response) (*GetEventsICSResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventsICSResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
